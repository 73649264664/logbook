diff --git a/logbook/base.py b/logbook/base.py
index b43ab81..fa30b7b 100644
--- a/logbook/base.py
+++ b/logbook/base.py
@@ -19,24 +19,31 @@ import traceback
 from datetime import datetime
 
 
-CRITICAL = 6
-ERROR = 5
-WARNING = 4
-NOTICE = 3
-INFO = 2
-DEBUG = 1
-NOTSET = 0
-
-_level_names = {
-    CRITICAL:   'CRITICAL',
-    ERROR:      'ERROR',
-    WARNING:    'WARNING',
-    NOTICE:     'NOTICE',
-    INFO:       'INFO',
-    DEBUG:      'DEBUG',
-    NOTSET:     'NOTSET'
-}
-_reverse_level_names = dict((v, k) for (k, v) in _level_names.iteritems())
+class enumerated_int(int):
+    def __new__(cls, name, value):
+        obj = int.__new__(cls, value)
+        obj.name = name
+        return obj
+
+    def __format__(self):
+        return self.name
+
+def enum(*values):
+    return dict((name, enumerated_int(name, value))
+                for (value, name) in enumerate(values))
+
+_levels = enum(
+    'NOTSET',
+    'DEBUG',
+    'INFO',
+    'NOTICE',
+    'WARNING',
+    'ERROR',
+    'CRITICAL',
+)
+
+globals().update(_levels)
+
 _missing = object()
 _main_thread = thread.get_ident()
 
@@ -93,7 +100,7 @@ def _group_reflected_property(name, default, fallback=_missing):
 def get_level_name(level):
     """Return the textual representation of logging level 'level'."""
     try:
-        return _level_names[level]
+        return level.name
     except KeyError:
         raise LookupError('unknown level')
 
@@ -102,7 +109,7 @@ def lookup_level(level):
     if isinstance(level, (int, long)):
         return level
     try:
-        return _reverse_level_names[level]
+        return _levels[level]
     except KeyError:
         raise LookupError('unknown level name %s' % level)
 
@@ -181,7 +188,7 @@ class LogRecord(object):
 
     @cached_property
     def level_name(self):
-        return get_level_name(self.level)
+        return self.level.name
 
     @cached_property
     def calling_frame(self):
